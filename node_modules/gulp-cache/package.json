{
  "name": "gulp-cache",
  "version": "0.1.1",
  "description": "A cache proxy task for Gulp",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/jshint/bin/jshint **/*.js && ./node_modules/mocha/bin/mocha -R spec",
    "coverage": "./node_modules/jshint/bin/jshint **/*.js && ./node_modules/mocha/bin/mocha --require blanket -R html-cov > coverage.html && open coverage.html"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jgable/gulp-cache.git"
  },
  "keywords": [
    "gulpplugin"
  ],
  "author": {
    "name": "Jacob Gable",
    "email": "jacob.gable@gmail.com",
    "url": "http://jacobgable.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jgable/gulp-cache/issues"
  },
  "devDependencies": {
    "should": "~2.1.1",
    "mocha": "~1.17.0",
    "jshint": "~2.4.1",
    "sinon": "~1.7.3"
  },
  "dependencies": {
    "gulp-util": "~2.2.9",
    "cache-swap": "0.0.5",
    "lodash-node": "~2.4.1",
    "bluebird": "~1.0.0",
    "map-stream": "~0.1.0"
  },
  "config": {
    "blanket": {
      "pattern": [
        "index.js",
        "/lib/TaskProxy.js"
      ],
      "data-cover-never": "node_modules"
    }
  },
  "readme": "gulp-cache  [![status](https://travis-ci.org/jgable/gulp-cache.png?branch=master)](https://travis-ci.org/jgable/gulp-cache)\n==========\n\nA temp file based caching proxy task for Gulp.\n\n## Usage\n\n```javascript\nvar gulp = require('gulp');\nvar jshint = require('gulp-jshint');\nvar cache = require('gulp-cache');\n\ngulp.task('lint', function() {\n  gulp.src('./lib/*.js')\n    .pipe(cache(jshint('.jshintrc'), {\n      key: makeHashKey,\n      // What on the result indicates it was successful\n      success: function (jshintedFile) {\n        return jshintedFile.jshint.success;\n      },\n      // What to store as the result of the successful action\n      value: function (jshintedFile) {\n        // Will be extended onto the file object on a cache hit next time task is ran\n        return {\n          jshint: jshintedFile.jshint\n        };\n      }\n    })\n    .pipe(jshint.reporter('default'));\n});\n\nvar jsHintVersion = '2.4.1',\n  jshintOptions = fs.readFileSync('.jshintrc');\nfunction makeHashKey(file) {\n  // Key off the file contents, jshint version and options\n  return [file.contents.toString('utf8'), jshintVersion, jshintOptions].join('');\n}\n```\n\n## Options\n\n#### Key\n\n> [Optional] What to use to determine the uniqueness of an input file for this task.\n\n- Can return a string or a promise that resolves to a string.  Optionally, can accept a callback parameter for idiomatic node style asynchronous operations.  \n\n- The result of this method is converted to a unique MD5 hash automatically; no need to do this yourself.\n\n- Defaults to `file.contents` if a Buffer, or `undefined` if a Stream.\n\n#### Success\n\n> [Optional] How to determine if the resulting file was successful.\n\n- Must return a truthy value that is used to determine whether to cache the result of the task.\n\n- Defaults to true, so any task results will be cached.\n\n#### Value\n\n> [Optional] What to store as the cached result of the task.\n\n- Can be a function that returns an Object or a promise that resolves to an Object.  Optionally, can accept a callback for idiomatic node style asynchronous operations.\n\n- Can also be set to a string that will be picked (using `_.pick`) of the task result file.\n\n- The result of this method is run through `JSON.stringify` and stored in a temp file for later retrieval.\n\n- Defaults to `'contents'` which will grab the resulting file.contents and store them as a string.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014 [Jacob Gable](http://jacobgable.com)",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jgable/gulp-cache",
  "_id": "gulp-cache@0.1.1",
  "dist": {
    "shasum": "a6b488aac31055903d9d4c7efcf69156e7aa9a76"
  },
  "_from": "gulp-cache@",
  "_resolved": "https://registry.npmjs.org/gulp-cache/-/gulp-cache-0.1.1.tgz"
}
