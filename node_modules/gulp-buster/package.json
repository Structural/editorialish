{
  "name": "gulp-buster",
  "description": "Cache buster hashes generator for gulp",
  "version": "0.2.1",
  "author": {
    "name": "Ult Combo",
    "email": "ultcombo@gmail.com"
  },
  "main": "./index.js",
  "keywords": [
    "gulpplugin",
    "cachebuster",
    "cache buster"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/UltCombo/gulp-buster.git"
  },
  "dependencies": {
    "event-stream": "~3.1.0",
    "gulp-util": "~2.2.12"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "license": "WTFPL",
  "devDependencies": {
    "should": "~3.0.1",
    "mocha": "~1.17.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "readme": "# [gulp](https://github.com/gulpjs/gulp/)-buster\r\n[![NPM version](https://badge.fury.io/js/gulp-buster.png)](https://npmjs.org/package/gulp-buster)\r\n[![Build Status](https://travis-ci.org/UltCombo/gulp-buster.png?branch=master)](https://travis-ci.org/UltCombo/gulp-buster)\r\n[![Dependency Status](https://david-dm.org/UltCombo/gulp-buster.png)](https://david-dm.org/UltCombo/gulp-buster)\r\n[![devDependency Status](https://david-dm.org/UltCombo/gulp-buster/dev-status.png)](https://david-dm.org/UltCombo/gulp-buster#info=devDependencies)\r\n\r\nCache buster hashes generator for gulp\r\n\r\n## Install\r\n\r\nFirst off, [install gulp](https://github.com/gulpjs/gulp/blob/master/docs/getting-started.md).\r\n\r\nThen install gulp-buster as a development dependency:\r\n\r\n```\r\nnpm install --save-dev gulp-buster\r\n```\r\n\r\n## How to use\r\n\r\ngulp-buster can be used standalone as part of a build task, or in conjunction with [`gulp-watch`](https://npmjs.org/package/gulp-watch) to update the cache buster hashes as the files are modified.\r\n\r\nExample with `gulp-watch`:\r\n\r\n```js\r\nvar gulp = require('gulp'),\r\n\twatch = require('gulp-watch'),\r\n\tbust = require('gulp-buster');\r\n\r\ngulp.task('default', function() {\r\n\treturn gulp.src([\r\n\t\t'**/*.min.js',\r\n\t\t'css/*.css'\r\n\t\t]).pipe(watch(function(files) {\r\n\t\t\treturn files\r\n\t\t\t\t.pipe(bust('busters.json')) // the output filename\r\n\t\t\t\t.pipe(gulp.dest('.')); // output file to project root\r\n\t\t}));\r\n});\r\n```\r\n\r\n## Parameters\r\n\r\n- `fileName` (first parameter, string or `undefined`, optional): the output JSON file's name (with extension). The default is `busters.json`, which can also be changed through the `.config()` method (see below).\r\n\r\n## Configs\r\n\r\nYou can set global configurations such as the hash algorithm and length (as well as the output `fileName`, which is useful when using a custom output filename and multiple entry points, more on that later) by calling the `.config()` method. It is very jQuery-y:\r\n\r\n```js\r\nvar bust = require('gulp-buster');\r\n\r\n// accepts an object as setter\r\nbust.config({\r\n\talgo: 'sha1',\r\n\tlength: 6\r\n});\r\n\r\n// pass two arguments to set the value for a single config\r\nbust.config('length', 8);\r\n\r\n// and of course, pass a single string to retrieve the given config's value\r\nvar lengthLimit = bust.config('length'); // 8\r\n\r\n// pass no arguments to retrieve the current configs object\r\nvar configs = bust.config(); // { fileName: 'busters.json', algo: 'sha1', length: 8 [, ...] }\r\n// NOTE: this returns a reference to the actual config object, so it is possible (but not advisable)\r\n// to edit the plugin's configs by assigning to this object's properties.\r\n```\r\n\r\n### Available configurations\r\n\r\n- `fileName` (string): the filename to be used when no `fileName` argument is specified in a `bust()` call. Defaults to `busters.json`.\r\n- `algo` (string): the hashing algorithm to be used. Defaults to `md5`. Accepts the same algorithms as [`crypto.createHash`](http://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm).\r\n- `length` (number): the maximum length of the hash. If specified, only the leading characters of the hash (up to `length`) will be returned. Defaults to `0`, which means no limit (actual length will then depend on the hashing algorithm used). Specifying a length larger than the hash will have no effect.\r\n\r\n## Multiple streams - single and multiple output files\r\n\r\ngulp-buster groups hashes by the output `fileName`. That means, piping two different streams into `bust('foo.json')` will merge both of those streams' files' hashes into the same output file (obviously, you should then set both streams' `.dest()` to the same path to don't create duplicated output files). Likewise, in case you'd like two streams' files to have their hashes outputted to different files, simply pass different filenames (and set their `.dest()` to your liking).\r\n\r\n<!-- TODO lacking example, add it once gulp 3.5 is released with this fix https://github.com/gulpjs/gulp/issues/185 -->\r\n\r\n## Integrating with Web applications\r\n\r\ngulp-buster is language-agnostic, thus this part relies on you and your specific use case. gulp-buster generates a JSON file in the following format:\r\n\r\n```js\r\n{\r\n\t\"path/to/file/relative/to/project/root/filename.ext\": \"hash\",\r\n\t//other entries\r\n}\r\n```\r\n\r\nIntegration can be easily achieved on any language which supports JSON parsing, in either back-end or front-end. Here's a Node.js example:\r\n\r\n**asset-loader.js**\r\n```js\r\nvar busters = require('path/to/busters.json');\r\nmodule.exports = function(path) {\r\n\treturn path + (busters[path] ? '?' + busters[path] : '');\r\n};\r\n```\r\n\r\nThen when outputting cache-busted file paths, simply call the asset loader passing the (relative to project root) file path. Example with Express and Jade:\r\n\r\n```jade\r\nscript(src=fooSrc)\r\n```\r\n\r\n```js\r\nvar asset = require('./asset-loader.js');\r\nres.render('view', { fooSrc: '/' + asset('js/min/foo.min.js') }, function(err, html) {\r\n\t// ...\r\n});\r\n```\r\n\r\nAs you can see, the gulp-buster `busters.json`'s paths are relative to project root without the leading slash, so we manually prepend a `/` to the cache-busted URL. This works nicely if your project root corresponds to the web server root. Otherwise, you will have to prepend the correct base URL. The optimal way would be to dynamically retrieve your app's base URL, specially as the project path relative to the web server root may differ between production and local development environments (e.g. it is a common scenario to have the project run at `/` in the production server and at `/myProject/` in local development).\r\n\r\nThere are many ways to implement this in the front-end as well. If using an AMD loader such as Require.js, you can map modules to cache-busted URLs in the config. Even without any loader, it is possible to `document.write` the scripts as follows:\r\n\r\n```js\r\n['app', 'services', 'controllers', 'filters', 'directives'].forEach(function(s) {\r\n\tdocument.write('<script src=\"/' + asset('js/' + s + '.js') + '\"><\\/script>');\r\n});\r\n```\r\n\r\n**Note:** If implementing this in the front-end, make sure to load the fresh (non-cached) `busters.json` file. That is, retrieving it through an Ajax request may return a cached version of it depending on the server configurations. Append a timestamp to the request URL's querystring to prevent caching issues. You may also output the JSON file's contents inside of a dynamic page's `<script>` tag assigning it to a variable. JSON (JavaScript Object Notation) is a subset of the JS object/array literals syntax, so this is perfectly valid as well.\r\n\r\nAs the asset loader implementation is up to you, you may make it the way which better fits your application. My personal implementation checks the file extension (js/css/png) and returns the full HTML tag for it, accepts string/array of strings overloading for the path argument, and also takes the base path as an optional argument.\r\n\r\nYou may publish your own gulp-buster asset loaders in GitHub and contact me by [opening an issue](https://github.com/UltCombo/gulp-buster/issues/new) in this repository in case you'd like your asset loader to be published here. Make sure to include clear how to use instructions in the readme file of your asset loader's repository.\r\n\r\n## Changelog\r\n\r\n[Available here.](https://github.com/UltCombo/gulp-buster/blob/master/CHANGELOG.md)\r\n\r\n## FAQ\r\n\r\n**Q. Is the correct name gulp-buster, gulp-buster or gulp-Buster?**\r\nThe name is always lowercase, matching the npm package name.\r\n\r\n**Q. I am having issues with watch mode, what am I doing wrong?**\r\nIt is strongly advised to use the [`gulp-watch`](https://npmjs.org/package/gulp-watch) plugin for piping files into gulp-buster. Other watchers may not pipe all source files when starting the task and thus causes gulp-buster to not create the initial in-memory hashes cache of all tracked files.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/UltCombo/gulp-buster/issues"
  },
  "homepage": "https://github.com/UltCombo/gulp-buster",
  "_id": "gulp-buster@0.2.1",
  "dist": {
    "shasum": "c7fb4e83349fc28569b9a31d50372b260a963d8a"
  },
  "_from": "gulp-buster@",
  "_resolved": "https://registry.npmjs.org/gulp-buster/-/gulp-buster-0.2.1.tgz"
}
