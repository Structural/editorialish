{
  "name": "backbone.babysitter",
  "description": "Manage child views in a Backbone.View",
  "version": "0.0.6",
  "homepage": "https://github.com/marionettejs/backbone.babysitter",
  "main": "lib/amd/backbone.babysitter.js",
  "keywords": [
    "backbone",
    "plugin",
    "computed",
    "field",
    "model",
    "client",
    "browser"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/marionettejs/backbone.babysitter/blob/master/LICENSE.md"
    }
  ],
  "scripts": {
    "test": "grunt jasmine",
    "start": "grunt jasmine-server"
  },
  "author": {
    "name": "Derick Bailey",
    "email": "marionettejs@gmail.com",
    "url": "http://derickbailey.lostechies.com"
  },
  "bugs": {
    "url": "https://github.com/marionettejs/backbone.babysitter/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marionettejs/backbone.babysitter.git"
  },
  "github": "https://github.com/marionettejs/backbone.babysitter",
  "dependencies": {
    "jquery": "~1.8.3",
    "backbone": "~1.0.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jasmine": "~0.3.1",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-plato": "~0.1.4",
    "grunt-preprocess": "git://github.com/onehealth/grunt-preprocess.git#grunt-0.4.0",
    "grunt-contrib-uglify": "~0.1.1",
    "grunt-contrib-concat": "~0.1.2",
    "grunt-template-jasmine-istanbul": "~0.1.1",
    "grunt-contrib-watch": "~0.2.0",
    "grunt-contrib-connect": "~0.1.2"
  },
  "jam": {
    "dependencies": {
      "backbone": ">=0.9.9",
      "underscore": ">=1.4.0"
    },
    "main": "lib/amd/backbone.babysitter.js",
    "include": [
      "lib/amd/backbone.babysitter.js",
      "readme.md"
    ]
  },
  "maintainers": [
    {
      "name": "Stefan Zerkalica",
      "email": "zerkalica@gmail.com",
      "url": "https://github.com/zerkalica"
    },
    {
      "name": "Richard Mitchell",
      "email": "richard.j.mitchell@gmail.com"
    },
    {
      "name": "Joe Gornick",
      "url": "http://joegornick.com"
    }
  ],
  "readme": "# Backbone.BabySitter\n\nManage child views in a Backbone.View.\n\n## About Backbone.BabySitter\n\nBackbone provides a lot of functionality in its views, but does not directly\nprovide a way to manage child views or nested views. This is not terribly\ndifficult to do on your own, but it gets tedious to write the same code\nover and over again.\n\nBackbone.BabySitter provides a simple way to manage an unknown number of\nchild views within a Backbone.View, or other object that needs to track a\nlist of views.\n\n## Downloads And Source\n\nGrab the source from the `src` folder above. Grab the most recent builds\nfrom the links below.\n\n### Standard Builds\n\n* Development: [backbone.babysitter.js](https://raw.github.com/marionettejs/backbone.babysitter/master/lib/backbone.babysitter.js)\n\n* Production: [backbone.babysitter.min.js](https://raw.github.com/marionettejs/backbone.babysitter/master/lib/backbone.babysitter.min.js)\n\n### RequireJS (AMD) Builds\n\n* Development: [backbone.babysitter.js](https://raw.github.com/marionettejs/backbone.babysitter/master/lib/amd/backbone.babysitter.js)\n\n* Production: [backbone.babysitter.min.js](https://raw.github.com/marionettejs/backbone.babysitter/master/lib/amd/backbone.babysitter.min.js)\n\n## Documentation\n\nBackbone.BabySitter exposes one constructor function: `Backbone.ChildViewContainer`.\nThis constructor function contains all of the necessary code for managing a list of\nviews.\n\n### Storing Views\n\nViews can be added to a container by calling the `add` method:\n\n```js\nvar container = new Backbone.ChildViewContainer();\n\ncontainer.add(someView);\ncontainer.add(anotherView);\n```\n\nViews will be stored once and indexed in several ways:\n\n* by `view.cid`\n* by `view.model.cid` if the view has a model\n* by a custom index key\n\nWhen adding a view, you can optionally specify a custom index key \nby which you can later retrieve the view.\n\n```js\ncontainer.add(aView, \"an indexer\");\n```\n\nNote that the custom indexer should be unique within the container. If you\nadd two different views with the same custom indexer, the last one in will\nbe the only one stored by that index key.\n\n### Constructing With Views\n\nAn initial list of views can be added to the container through the\nconstructor function call. This list must be an array of view instances:\n\n```js\nvar views = [someView, anotherView];\nvar container = new Backbone.ChildViewContainer(views);\n```\n\n### Retrieving Views\n\nYou can retrieve a view by any of the index:\n\n```js\nvar container = new Backbone.ChildViewContainer();\n\ncontainer.add(someView);\ncontainer.add(anotherView);\ncontainer.add(collectionView);\ncontainer.add(aView, \"an indexer\");\n\n// find by view cid\nvar s = container.findByCid(someView.cid);\n\n// find by model\nvar av = container.findByModel(anotherView.model);\n\n// find by model cid\nvar av2 = container.findByModelCid(anotherView.model.cid);\n\n// find by custom key\nvar custv = container.findByCustom(\"an indexer\");\n\n// find by numeric index (unstable)\nvar custv = container.findByIndex(0);\n```\n\nIf the `findBy*` method cannot find the view, it will return undefined.\n\n### Removing A View\n\nYou can remove a view directly and it will be removed from all available\nindexes.\n\n```js\nvar container = new Backbone.ChildViewContainer();\n\ncontainer.add(view);\n\n// some time later\ncontainer.remove(view);\n```\n\nTo remove a view by an index, find it by that index and then remove\nthe resulting view.\n\n### Executing Methods On All Views\n\nYou can execute any arbitrary method with any arbitrary parameters on all of\nthe views within the container. There are two ways to do this: `container.call`\nand `container.apply`. These methods work similarly to `function.call` and\n`function.apply` in how parameters are passed through. However, they do not\nallow the context to be specified. The view on which a method is being called\nwill always be the context of the call.\n\n```js\nvar View = Backbone.View.extend({\n  doStuff: function(a, b){\n  },\n\n  moreStuff: function(a, b){\n  }\n});\n\nvar v1 = new View();\nvar v2 = new View();\n\nvar container = new Backbone.ChildViewContainer();\ncontainer.add(v1);\ncontainer.add(v2);\n\n// call the doStuff function\ncontainer.call(\"doStuff\", 1, 2);\n\n// apply the doStuff function\ncontainer.apply(\"doStuff\", [1, 2]);\n```\n\nIf any given view within the container does not have the method specified, it\nwill not be called on that view. No errors will be thrown in this situation.\n\n### Get The Number Of Stored Views\n\nTo get the number of stored views, call the `container.length` \nattribute. This attribute is updated any time a view is added or \nremoved.\n\n```js\nvar container = new Backbone.ChildViewContainer();\n\ncontainer.add(view);\ncontainer.add(v2);\ncontainer.add(v3);\n\nconsole.log(container.length); //=> 3\n\ncontainer.remove(v2);\n\nconsole.log(container.length); //=> 2\n```\n\n### Iterators And Collection Functions\n\nThe container object borrows several functions from Underscore.js, to\nprovide iterators and other collection functions, including:\n\n* forEach\n* each\n* map\n* find\n* detect\n* filter\n* select\n* reject\n* every\n* all\n* some\n* any\n* include\n* contains\n* invoke\n* toArray\n* first\n* initial\n* rest\n* last\n* without\n* isEmpty\n* pluck\n\nThese methods can be called directly on the container, to iterate and\nprocess the views held by the container.\n\n```js\nvar container = new Backbone.ChildViewContainer();\n\ncontainer.add(v1);\ncontainer.add(v2);\ncontainer.add(v3);\n\n// iterate over all of the views\ncontainer.each(function(view){\n  \n  // process each view individually, here\n\n});\n```\n\nFor more information about these methods, see the [Underscore.js documentation](http://underscorejs.org).\n\n## ChangeLog\n\nFor a complete change log, see the [CHANGELOG.md](https://github.com/marionettejs/backbone.babysitter/blob/master/CHANGELOG.md)\nfile.\n\n## License\n\nMIT - see [LICENSE.md](https://github.com/marionettejs/backbone.babysitter/blob/master/LICENSE.md)\n",
  "readmeFilename": "readme.md",
  "_id": "backbone.babysitter@0.0.6",
  "dist": {
    "shasum": "c47857f13e8c07f0aa791ec715001ccddb552523"
  },
  "_from": "backbone.babysitter@~0.0.6",
  "_resolved": "https://registry.npmjs.org/backbone.babysitter/-/backbone.babysitter-0.0.6.tgz"
}
